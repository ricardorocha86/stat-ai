import streamlit as st
import json
import os
# Removido: from openai import OpenAI 
# Adicionado: Importa a fun√ß√£o de IA modularizada
from paginas.llms import avaliar_resposta_exercicio
from paginas.funcoes import registrar_atividade_academica, registrar_acao_usuario

st.title("ü§ñ Corretor AI")

# --- Carregar Dados dos Exerc√≠cios ---
def carregar_exercicios(caminho_json):
    try:
        with open(caminho_json, "r", encoding="utf-8") as file:
            data = json.load(file)
        # Verifica se a estrutura b√°sica existe
        if "exercicios" in data and isinstance(data["exercicios"], list):
            return data["exercicios"]
        else:
            st.error(f"Erro: O arquivo JSON '{caminho_json}' n√£o cont√©m a chave 'exercicios' ou n√£o √© uma lista.")
            return []
    except FileNotFoundError:
        st.error(f"Erro: Arquivo de exerc√≠cios '{caminho_json}' n√£o encontrado.")
        return []
    except json.JSONDecodeError:
        st.error(f"Erro: O arquivo '{caminho_json}' n√£o √© um JSON v√°lido.")
        return []
    except Exception as e:
        st.error(f"Erro inesperado ao carregar exerc√≠cios: {e}")
        return []

caminho_json_exercicios = "arquivos/lista1.json"
exercicios_data = carregar_exercicios(caminho_json_exercicios)

# --- Conte√∫do da P√°gina (Sele√ß√£o e Exibi√ß√£o) ---
if not exercicios_data:
    st.warning("Nenhum exerc√≠cio carregado. Verifique o arquivo JSON.")
else:
    st.markdown("Selecione um exerc√≠cio da lista abaixo para visualizar seu enunciado e usar a ferramenta de avalia√ß√£o de resposta.")
    # Cria uma lista de op√ß√µes com os t√≠tulos dos exerc√≠cios
    opcoes = [f"{ex.get('numero', 'N/A')}. {ex.get('titulo', 'Sem T√≠tulo')}" for ex in exercicios_data]
    selecionado_label = st.selectbox("Selecione o exerc√≠cio:", opcoes, key="select_ex")

    if selecionado_label:  # Registra quando um exerc√≠cio √© selecionado
        registrar_atividade_academica(
            tipo="exercicio",
            modulo="Lista 1",
            detalhes={
                "acao": "visualizacao",
                "exercicio": selecionado_label
            }
        )

    st.divider()

    # Procura pelo exerc√≠cio selecionado
    exercicio_selecionado = next((item for item in exercicios_data if f"{item.get('numero', 'N/A')}. {item.get('titulo', 'Sem T√≠tulo')}" == selecionado_label), None)

    if exercicio_selecionado:
        st.subheader(f"Exerc√≠cio {exercicio_selecionado.get('numero', '')}: {exercicio_selecionado.get('titulo', '')}")
        
        # Verifica se h√° conte√∫do antes de exibir
        conteudo_exercicio = exercicio_selecionado.get("conteudo", "")
        if conteudo_exercicio:
             st.markdown(conteudo_exercicio)
        else:
             st.info("Este exerc√≠cio n√£o possui um enunciado detalhado no arquivo JSON.")

        st.divider()
        
        # --- Ferramenta: Avaliar Resposta AI --- 
        st.subheader("‚öñÔ∏è Avalie Sua Resposta com IA")
        st.info("Cole sua resposta para o exerc√≠cio acima e pe√ßa uma avalia√ß√£o direta.")

        enunciado_para_avaliacao = conteudo_exercicio if conteudo_exercicio else selecionado_label
        resposta_aluno = st.text_area("‚úèÔ∏è Sua Resposta:", height=150, key="avaliar_resposta_ex")

        if st.button("‚öñÔ∏è Avaliar minha resposta", key="btn_avaliar_ex", type="primary"):
            if not resposta_aluno:
                st.warning("Por favor, insira a sua resposta.")
            else:
                with st.spinner("Avaliando sua resposta..."):
                    response_content = avaliar_resposta_exercicio(enunciado_para_avaliacao, resposta_aluno)
                    if response_content:
                        with st.chat_message("assistant", avatar='‚öñÔ∏è'):
                            st.markdown(response_content)
                            # Registra a avalia√ß√£o da resposta
                            registrar_atividade_academica(
                                tipo="exercicio",
                                modulo="Lista 1",
                                detalhes={
                                    "acao": "avaliacao_resposta",
                                    "exercicio": selecionado_label,
                                    "tamanho_resposta": len(resposta_aluno)
                                }
                            )
                    # Erros j√° s√£o tratados dentro da fun√ß√£o avaliar_resposta_exercicio
    else:
        st.info("Selecione um exerc√≠cio na lista acima para ver os detalhes.") 