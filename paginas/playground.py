import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
import pandas as pd
from scipy.stats import norm, t, chi2
import seaborn as sns

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Playground de Infer√™ncia Estat√≠stica",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o do estilo dos gr√°ficos
import matplotlib
matplotlib.use('Agg')  # Backend n√£o-interativo para Streamlit
plt.style.use('default')
sns.set_palette("husl")

# Fun√ß√£o para criar gr√°ficos com estilo limpo
def configurar_grafico():
    plt.rcParams.update({
        'font.size': 12,
        'axes.labelsize': 14,
        'axes.titlesize': 16,
        'xtick.labelsize': 12,
        'ytick.labelsize': 12,
        'legend.fontsize': 12,
        'figure.titlesize': 18
    })

# Navega√ß√£o principal
def main():
    st.title("üìä Playground de Infer√™ncia Estat√≠stica")
    st.markdown("---")
    
    # Menu de navega√ß√£o
    paginas = {
        "üîî Distribui√ß√£o Normal": pagina_distribuicao_normal,
        "üìà Distribui√ß√µes Amostrais": pagina_distribuicoes_amostrais,
        "üìä Intervalo de Confian√ßa": pagina_intervalo_confianca,
        "üß™ Testes de Hip√≥teses": pagina_testes_hipoteses,
        "üìö Refer√™ncias em Nutri√ß√£o": pagina_referencias_nutricao
    }
    
    pagina_selecionada = st.sidebar.selectbox("Selecione uma p√°gina:", list(paginas.keys()))
    
    # Executar a p√°gina selecionada
    paginas[pagina_selecionada]()

def pagina_distribuicao_normal():
    st.header("üîî Calculadora da Distribui√ß√£o Normal")
    
    # Teoria
    st.markdown("""
    ### üìò Teoria
    > A distribui√ß√£o normal √© usada para modelar fen√¥menos cont√≠nuos. A √°rea sob a curva representa uma probabilidade. 
    > Podemos calcular a chance de um valor ser menor, maior ou estar entre dois valores.
    """)
    
    # Exemplos did√°ticos
    with st.expander("üìù Exemplos Did√°ticos"):
        st.markdown("""
        **Farm√°cia:** Tempo de absor√ß√£o de um medicamento segue N(90, 10¬≤). Qual a chance de ser absorvido em menos de 75 minutos?
        
        **Nutri√ß√£o:** O peso di√°rio de consumo de sal segue N(6g, 1¬≤). Qual a probabilidade de uma pessoa consumir entre 5g e 7g?
        
        **Outro:** O tempo de espera em um banco segue N(10 min, 2¬≤). Qual a chance de esperar mais que 12 minutos?
        """)
    
    # Inputs
    col1, col2 = st.columns(2)
    
    with col1:
        media = st.number_input("M√©dia (Œº):", value=0.0, step=0.1)
        desvio_padrao = st.number_input("Desvio padr√£o (œÉ):", value=1.0, step=0.1, min_value=0.1)
        
    with col2:
        tipo_calculo = st.selectbox("Tipo de c√°lculo:", 
                                   ["P(X < x)", "P(X > x)", "P(a < X < b)"])
        
        if tipo_calculo in ["P(X < x)", "P(X > x)"]:
            valor_x = st.number_input("Valor x:", value=0.0, step=0.1)
        else:
            valor_a = st.number_input("Valor a:", value=-1.0, step=0.1)
            valor_b = st.number_input("Valor b:", value=1.0, step=0.1)
    
    # C√°lculos
    if st.button("Calcular"):
        configurar_grafico()
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Gerar dados para a curva
        x = np.linspace(media - 4*desvio_padrao, media + 4*desvio_padrao, 1000)
        y = norm.pdf(x, media, desvio_padrao)
        
        # Plotar a curva normal
        ax.plot(x, y, 'b-', linewidth=2, label='Distribui√ß√£o Normal')
        
        # Calcular probabilidade e √°rea sombreada
        if tipo_calculo == "P(X < x)":
            probabilidade = norm.cdf(valor_x, media, desvio_padrao)
            valor_z = (valor_x - media) / desvio_padrao
            
            # √Årea sombreada
            x_fill = x[x <= valor_x]
            y_fill = norm.pdf(x_fill, media, desvio_padrao)
            ax.fill_between(x_fill, y_fill, alpha=0.3, color='red', label=f'P(X < {valor_x})')
            
            # Linha vertical
            ax.axvline(valor_x, color='red', linestyle='--', linewidth=2)
            ax.annotate(f'x = {valor_x}', xy=(valor_x, 0), xytext=(valor_x, 0.05),
                       arrowprops=dict(arrowstyle='->', color='red'))
            
            resultado_texto = f"A probabilidade de X ser menor que {valor_x} √© {probabilidade:.10f}"
            
        elif tipo_calculo == "P(X > x)":
            probabilidade = 1 - norm.cdf(valor_x, media, desvio_padrao)
            valor_z = (valor_x - media) / desvio_padrao
            
            # √Årea sombreada
            x_fill = x[x >= valor_x]
            y_fill = norm.pdf(x_fill, media, desvio_padrao)
            ax.fill_between(x_fill, y_fill, alpha=0.3, color='green', label=f'P(X > {valor_x})')
            
            # Linha vertical
            ax.axvline(valor_x, color='green', linestyle='--', linewidth=2)
            ax.annotate(f'x = {valor_x}', xy=(valor_x, 0), xytext=(valor_x, 0.05),
                       arrowprops=dict(arrowstyle='->', color='green'))
            
            resultado_texto = f"A probabilidade de X ser maior que {valor_x} √© {probabilidade:.10f}"
            
        else:  # P(a < X < b)
            probabilidade = norm.cdf(valor_b, media, desvio_padrao) - norm.cdf(valor_a, media, desvio_padrao)
            valor_z_a = (valor_a - media) / desvio_padrao
            valor_z_b = (valor_b - media) / desvio_padrao
            
            # √Årea sombreada
            x_fill = x[(x >= valor_a) & (x <= valor_b)]
            y_fill = norm.pdf(x_fill, media, desvio_padrao)
            ax.fill_between(x_fill, y_fill, alpha=0.3, color='blue', label=f'P({valor_a} < X < {valor_b})')
            
            # Linhas verticais
            ax.axvline(valor_a, color='blue', linestyle='--', linewidth=2)
            ax.axvline(valor_b, color='blue', linestyle='--', linewidth=2)
            ax.annotate(f'a = {valor_a}', xy=(valor_a, 0), xytext=(valor_a, 0.05),
                       arrowprops=dict(arrowstyle='->', color='blue'))
            ax.annotate(f'b = {valor_b}', xy=(valor_b, 0), xytext=(valor_b, 0.05),
                       arrowprops=dict(arrowstyle='->', color='blue'))
            
            resultado_texto = f"A probabilidade de X estar entre {valor_a} e {valor_b} √© {probabilidade:.10f}"
        
        ax.set_xlabel('Valores de X')
        ax.set_ylabel('Densidade de Probabilidade')
        ax.set_title(f'Distribui√ß√£o Normal (Œº={media}, œÉ={desvio_padrao})')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        st.pyplot(fig)
        
        # Resultados
        st.success(f"**Resultado:** {resultado_texto}")
        if tipo_calculo != "P(a < X < b)":
            st.info(f"**Valor Z correspondente:** {valor_z:.10f}")

def pagina_distribuicoes_amostrais():
    st.header("üìà Distribui√ß√µes Amostrais")
    
    # Teoria
    st.markdown("""
    ### üìò Teoria
    > Ao coletar muitas amostras, a distribui√ß√£o das m√©dias ou propor√ß√µes amostrais se aproxima da normal, 
    > com m√©dia igual √† da popula√ß√£o e desvio padr√£o ajustado pelo tamanho da amostra.
    """)
    
    # Exemplos did√°ticos
    with st.expander("üìù Exemplos Did√°ticos"):
        st.markdown("""
        **Farm√°cia:** Tempo de libera√ß√£o de um f√°rmaco. Ver como a m√©dia de amostras varia.
        
        **Nutri√ß√£o:** Propor√ß√£o de pessoas que consomem fibras. Ver distribui√ß√£o de pÃÇ com n=30.
        
        **Outro:** Idade m√©dia de clientes em um plano de sa√∫de. Varia√ß√µes da m√©dia em amostras.
        """)
    
    # Inputs
    col1, col2 = st.columns(2)
    
    with col1:
        tipo_distribuicao = st.selectbox("Tipo:", ["M√©dia", "Propor√ß√£o"])
        tamanho_amostra = st.number_input("Tamanho da amostra (n):", value=30, min_value=5, max_value=1000)
        numero_simulacoes = st.number_input("N√∫mero de simula√ß√µes:", value=1000, min_value=100, max_value=10000)
    
    with col2:
        if tipo_distribuicao == "M√©dia":
            media_populacional = st.number_input("M√©dia populacional (Œº):", value=100.0, step=0.1)
            desvio_populacional = st.number_input("Desvio padr√£o populacional (œÉ):", value=15.0, step=0.1, min_value=0.1)
        else:
            proporcao_populacional = st.number_input("Propor√ß√£o populacional (p):", value=0.5, min_value=0.01, max_value=0.99, step=0.01)
    
    # Simula√ß√£o
    if st.button("Executar Simula√ß√£o"):
        configurar_grafico()
        
        if tipo_distribuicao == "M√©dia":
            # Simular m√©dias amostrais
            medias_amostrais = []
            for _ in range(numero_simulacoes):
                amostra = np.random.normal(media_populacional, desvio_populacional, tamanho_amostra)
                medias_amostrais.append(np.mean(amostra))
            
            medias_amostrais = np.array(medias_amostrais)
            
            # Par√¢metros te√≥ricos
            media_teorica = media_populacional
            desvio_teorico = desvio_populacional / np.sqrt(tamanho_amostra)
            
            # Estat√≠sticas simuladas
            media_simulada = np.mean(medias_amostrais)
            desvio_simulado = np.std(medias_amostrais)
            
            # Gr√°fico
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Histograma das m√©dias simuladas
            ax.hist(medias_amostrais, bins=50, density=True, alpha=0.7, color='skyblue', 
                   label=f'M√©dias Simuladas (n={numero_simulacoes})')
            
            # Curva normal te√≥rica
            x = np.linspace(medias_amostrais.min(), medias_amostrais.max(), 1000)
            y_teorica = norm.pdf(x, media_teorica, desvio_teorico)
            ax.plot(x, y_teorica, 'r-', linewidth=3, label='Distribui√ß√£o Te√≥rica')
            
            # Linhas verticais
            ax.axvline(media_teorica, color='red', linestyle='--', linewidth=2, label=f'M√©dia Te√≥rica: {media_teorica:.4f}')
            ax.axvline(media_simulada, color='blue', linestyle='--', linewidth=2, label=f'M√©dia Simulada: {media_simulada:.4f}')
            
            ax.set_xlabel('M√©dias Amostrais')
            ax.set_ylabel('Densidade')
            ax.set_title(f'Distribui√ß√£o Amostral da M√©dia (n={tamanho_amostra})')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            col1, col2 = st.columns(2)
            with col1:
                st.metric("M√©dia Te√≥rica", f"{media_teorica:.10f}")
                st.metric("Desvio Padr√£o Te√≥rico", f"{desvio_teorico:.10f}")
            with col2:
                st.metric("M√©dia Simulada", f"{media_simulada:.10f}")
                st.metric("Desvio Padr√£o Simulado", f"{desvio_simulado:.10f}")
        
        else:  # Propor√ß√£o
            # Simular propor√ß√µes amostrais
            proporcoes_amostrais = []
            for _ in range(numero_simulacoes):
                amostra = np.random.binomial(1, proporcao_populacional, tamanho_amostra)
                proporcoes_amostrais.append(np.mean(amostra))
            
            proporcoes_amostrais = np.array(proporcoes_amostrais)
            
            # Par√¢metros te√≥ricos
            media_teorica = proporcao_populacional
            desvio_teorico = np.sqrt(proporcao_populacional * (1 - proporcao_populacional) / tamanho_amostra)
            
            # Estat√≠sticas simuladas
            media_simulada = np.mean(proporcoes_amostrais)
            desvio_simulado = np.std(proporcoes_amostrais)
            
            # Gr√°fico
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Histograma das propor√ß√µes simuladas
            ax.hist(proporcoes_amostrais, bins=50, density=True, alpha=0.7, color='lightgreen', 
                   label=f'Propor√ß√µes Simuladas (n={numero_simulacoes})')
            
            # Curva normal te√≥rica
            x = np.linspace(proporcoes_amostrais.min(), proporcoes_amostrais.max(), 1000)
            y_teorica = norm.pdf(x, media_teorica, desvio_teorico)
            ax.plot(x, y_teorica, 'r-', linewidth=3, label='Distribui√ß√£o Te√≥rica')
            
            # Linhas verticais
            ax.axvline(media_teorica, color='red', linestyle='--', linewidth=2, label=f'Propor√ß√£o Te√≥rica: {media_teorica:.4f}')
            ax.axvline(media_simulada, color='green', linestyle='--', linewidth=2, label=f'Propor√ß√£o Simulada: {media_simulada:.4f}')
            
            ax.set_xlabel('Propor√ß√µes Amostrais')
            ax.set_ylabel('Densidade')
            ax.set_title(f'Distribui√ß√£o Amostral da Propor√ß√£o (n={tamanho_amostra})')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Propor√ß√£o Te√≥rica", f"{media_teorica:.10f}")
                st.metric("Desvio Padr√£o Te√≥rico", f"{desvio_teorico:.10f}")
            with col2:
                st.metric("Propor√ß√£o Simulada", f"{media_simulada:.10f}")
                st.metric("Desvio Padr√£o Simulado", f"{desvio_simulado:.10f}")

def pagina_intervalo_confianca():
    st.header("üìä Intervalo de Confian√ßa")
    
    # Teoria
    st.markdown("""
    ### üìò Teoria
    > Intervalos de confian√ßa fornecem uma estimativa da localiza√ß√£o do par√¢metro populacional (m√©dia ou propor√ß√£o), 
    > com base na variabilidade da amostra.
    """)
    
    # Abas
    aba_media, aba_proporcao = st.tabs(["üìà IC para a M√©dia", "üìä IC para a Propor√ß√£o"])
    
    with aba_media:
        st.subheader("Intervalo de Confian√ßa para a M√©dia")
        
        # Exemplos
        with st.expander("üìù Exemplos Did√°ticos"):
            st.markdown("""
            **Farm√°cia:** A m√©dia de dosagens administradas foi 98mg. Calcular IC.
            
            **Nutri√ß√£o:** Estimar a m√©dia de calorias ingeridas por crian√ßas com 95% de confian√ßa.
            
            **Outro:** Tempo m√©dio de atendimento em hospital. Estimar com base em amostra.
            """)
        
        # Inputs
        col1, col2 = st.columns(2)
        
        with col1:
            media_amostral = st.number_input("M√©dia amostral (xÃÑ):", value=100.0, step=0.1)
            desvio_amostral = st.number_input("Desvio padr√£o amostral (s):", value=15.0, step=0.1, min_value=0.1)
            
        with col2:
            tamanho_amostra_ic = st.number_input("Tamanho da amostra (n):", value=25, min_value=2)
            nivel_confianca = st.selectbox("N√≠vel de confian√ßa:", [90, 95, 99])
            
        # Valor hipot√©tico opcional
        usar_mu0 = st.checkbox("Incluir valor hipot√©tico Œº‚ÇÄ no gr√°fico")
        if usar_mu0:
            mu0 = st.number_input("Valor hipot√©tico (Œº‚ÇÄ):", value=105.0, step=0.1)
        
        if st.button("Calcular IC para M√©dia"):
            # C√°lculos
            alpha = (100 - nivel_confianca) / 100
            graus_liberdade = tamanho_amostra_ic - 1
            t_critico = t.ppf(1 - alpha/2, graus_liberdade)
            
            erro_padrao = desvio_amostral / np.sqrt(tamanho_amostra_ic)
            margem_erro = t_critico * erro_padrao
            
            limite_inferior = media_amostral - margem_erro
            limite_superior = media_amostral + margem_erro
            
            # Gr√°fico
            configurar_grafico()
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # Linha do intervalo
            ax.plot([limite_inferior, limite_superior], [0.5, 0.5], 'b-', linewidth=8, alpha=0.7, label=f'IC {nivel_confianca}%')
            ax.plot(media_amostral, 0.5, 'ro', markersize=12, label=f'xÃÑ = {media_amostral}')
            
            # Margens com hachuras
            ax.fill_between([limite_inferior, media_amostral], 0.4, 0.6, alpha=0.3, color='blue', hatch='///')
            ax.fill_between([media_amostral, limite_superior], 0.4, 0.6, alpha=0.3, color='blue', hatch='///')
            
            # Anota√ß√µes
            ax.annotate(f'LI = {limite_inferior:.4f}', xy=(limite_inferior, 0.5), xytext=(limite_inferior, 0.7),
                       arrowprops=dict(arrowstyle='->', color='blue'), ha='center')
            ax.annotate(f'LS = {limite_superior:.4f}', xy=(limite_superior, 0.5), xytext=(limite_superior, 0.7),
                       arrowprops=dict(arrowstyle='->', color='blue'), ha='center')
            
            # Valor hipot√©tico se especificado
            if usar_mu0:
                ax.plot(mu0, 0.5, 'gs', markersize=12, label=f'Œº‚ÇÄ = {mu0}')
                if limite_inferior <= mu0 <= limite_superior:
                    resultado_hipotese = "Œº‚ÇÄ est√° DENTRO do intervalo"
                    cor_resultado = "green"
                else:
                    resultado_hipotese = "Œº‚ÇÄ est√° FORA do intervalo"
                    cor_resultado = "red"
                ax.text(0.5, 0.9, resultado_hipotese, transform=ax.transAxes, 
                       fontsize=14, ha='center', color=cor_resultado, weight='bold')
            
            ax.set_ylim(0.3, 1.0)
            ax.set_xlabel('Valores')
            ax.set_title(f'Intervalo de Confian√ßa {nivel_confianca}% para a M√©dia')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            st.success(f"**Intervalo de Confian√ßa {nivel_confianca}%:** [{limite_inferior:.10f}, {limite_superior:.10f}]")
            st.info(f"**Margem de Erro:** {margem_erro:.10f}")
            st.info(f"**Valor t cr√≠tico:** {t_critico:.10f}")
    
    with aba_proporcao:
        st.subheader("Intervalo de Confian√ßa para a Propor√ß√£o")
        
        # Exemplos
        with st.expander("üìù Exemplos Did√°ticos"):
            st.markdown("""
            **Farm√°cia:** Propor√ß√£o de pacientes que tiveram efeito colateral.
            
            **Nutri√ß√£o:** Percentual de pessoas que consomem refrigerantes diariamente.
            
            **Outro:** Propor√ß√£o de eleitores indecisos numa pesquisa.
            """)
        
        # Inputs
        col1, col2 = st.columns(2)
        
        with col1:
            sucessos = st.number_input("N√∫mero de sucessos (x):", value=45, min_value=0)
            tamanho_amostra_prop = st.number_input("Tamanho da amostra (n):", value=100, min_value=1)
            
        with col2:
            nivel_confianca_prop = st.selectbox("N√≠vel de confian√ßa:", [90, 95, 99], key="prop_conf")
        
        if st.button("Calcular IC para Propor√ß√£o"):
            # C√°lculos
            proporcao_amostral = sucessos / tamanho_amostra_prop
            alpha = (100 - nivel_confianca_prop) / 100
            z_critico = norm.ppf(1 - alpha/2)
            
            erro_padrao_prop = np.sqrt(proporcao_amostral * (1 - proporcao_amostral) / tamanho_amostra_prop)
            margem_erro_prop = z_critico * erro_padrao_prop
            
            limite_inferior_prop = max(0, proporcao_amostral - margem_erro_prop)
            limite_superior_prop = min(1, proporcao_amostral + margem_erro_prop)
            
            # Gr√°fico
            configurar_grafico()
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # Linha do intervalo
            ax.plot([limite_inferior_prop, limite_superior_prop], [0.5, 0.5], 'g-', linewidth=8, alpha=0.7, 
                   label=f'IC {nivel_confianca_prop}%')
            ax.plot(proporcao_amostral, 0.5, 'ro', markersize=12, label=f'pÃÇ = {proporcao_amostral:.4f}')
            
            # Margens com hachuras
            ax.fill_between([limite_inferior_prop, proporcao_amostral], 0.4, 0.6, alpha=0.3, color='green', hatch='///')
            ax.fill_between([proporcao_amostral, limite_superior_prop], 0.4, 0.6, alpha=0.3, color='green', hatch='///')
            
            # Anota√ß√µes com setas
            ax.annotate(f'LI = {limite_inferior_prop:.4f}', xy=(limite_inferior_prop, 0.5), xytext=(limite_inferior_prop, 0.7),
                       arrowprops=dict(arrowstyle='->', color='green'), ha='center')
            ax.annotate(f'LS = {limite_superior_prop:.4f}', xy=(limite_superior_prop, 0.5), xytext=(limite_superior_prop, 0.7),
                       arrowprops=dict(arrowstyle='->', color='green'), ha='center')
            
            ax.set_ylim(0.3, 1.0)
            ax.set_xlim(max(0, limite_inferior_prop - 0.1), min(1, limite_superior_prop + 0.1))
            ax.set_xlabel('Propor√ß√£o')
            ax.set_title(f'Intervalo de Confian√ßa {nivel_confianca_prop}% para a Propor√ß√£o')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            st.success(f"**Intervalo de Confian√ßa {nivel_confianca_prop}%:** [{limite_inferior_prop:.10f}, {limite_superior_prop:.10f}]")
            st.info(f"**Propor√ß√£o Amostral:** {proporcao_amostral:.10f}")
            st.info(f"**Margem de Erro:** {margem_erro_prop:.10f}")
            st.info(f"**Valor z cr√≠tico:** {z_critico:.10f}")

def pagina_testes_hipoteses():
    st.header("üß™ Testes de Hip√≥teses")
    
    # Teoria
    st.markdown("""
    ### üìò Teoria
    > Os testes de hip√≥tese verificam se uma evid√™ncia amostral √© forte o suficiente para rejeitar uma suposi√ß√£o sobre a popula√ß√£o.
    """)
    
    # Abas
    aba_media, aba_proporcao, aba_diferenca = st.tabs(["üìà Teste para M√©dia", "üìä Teste para Propor√ß√£o", "‚öñÔ∏è Diferen√ßa de M√©dias"])
    
    with aba_media:
        st.subheader("Teste de Hip√≥tese para a M√©dia")
        
        # Exemplos
        with st.expander("üìù Exemplos Did√°ticos"):
            st.markdown("""
            **Farm√°cia:** Testar se a concentra√ß√£o m√©dia do rem√©dio difere de 100mg.
            
            **Nutri√ß√£o:** Verificar se o consumo m√©dio de a√ß√∫car √© maior que 50g.
            
            **Outro:** Sal√°rio m√©dio dos funcion√°rios √© diferente de R$3000?
            """)
        
        # Inputs
        col1, col2 = st.columns(2)
        
        with col1:
            media_amostral_teste = st.number_input("M√©dia amostral (xÃÑ):", value=102.0, step=0.1, key="teste_media")
            desvio_amostral_teste = st.number_input("Desvio padr√£o amostral (s):", value=12.0, step=0.1, min_value=0.1, key="teste_desvio")
            tamanho_amostra_teste = st.number_input("Tamanho da amostra (n):", value=25, min_value=2, key="teste_n")
            
        with col2:
            mu0_teste = st.number_input("Valor hipot√©tico (Œº‚ÇÄ):", value=100.0, step=0.1, key="teste_mu0")
            alpha_teste = st.selectbox("N√≠vel de signific√¢ncia (Œ±):", [0.01, 0.05, 0.10], key="teste_alpha")
            tipo_teste = st.selectbox("Tipo de teste:", ["Bilateral", "Unilateral √† direita", "Unilateral √† esquerda"], key="teste_tipo")
        
        if st.button("Executar Teste para M√©dia"):
            # C√°lculos
            graus_liberdade_teste = tamanho_amostra_teste - 1
            erro_padrao_teste = desvio_amostral_teste / np.sqrt(tamanho_amostra_teste)
            estatistica_t = (media_amostral_teste - mu0_teste) / erro_padrao_teste
            
            # Valores cr√≠ticos e p-valor
            if tipo_teste == "Bilateral":
                t_critico_inf = t.ppf(alpha_teste/2, graus_liberdade_teste)
                t_critico_sup = t.ppf(1 - alpha_teste/2, graus_liberdade_teste)
                p_valor = 2 * (1 - t.cdf(abs(estatistica_t), graus_liberdade_teste))
                regiao_rejeicao = f"t < {t_critico_inf:.4f} ou t > {t_critico_sup:.4f}"
            elif tipo_teste == "Unilateral √† direita":
                t_critico_sup = t.ppf(1 - alpha_teste, graus_liberdade_teste)
                p_valor = 1 - t.cdf(estatistica_t, graus_liberdade_teste)
                regiao_rejeicao = f"t > {t_critico_sup:.4f}"
            else:  # Unilateral √† esquerda
                t_critico_inf = t.ppf(alpha_teste, graus_liberdade_teste)
                p_valor = t.cdf(estatistica_t, graus_liberdade_teste)
                regiao_rejeicao = f"t < {t_critico_inf:.4f}"
            
            # Decis√£o
            if p_valor < alpha_teste:
                decisao = "Rejeitamos H‚ÇÄ"
                cor_decisao = "red"
            else:
                decisao = "N√£o rejeitamos H‚ÇÄ"
                cor_decisao = "green"
            
            # Gr√°fico
            configurar_grafico()
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Curva t
            x = np.linspace(-4, 4, 1000)
            y = t.pdf(x, graus_liberdade_teste)
            ax.plot(x, y, 'b-', linewidth=2, label='Distribui√ß√£o t')
            
            # √Åreas cr√≠ticas
            if tipo_teste == "Bilateral":
                x_crit_inf = x[x <= t_critico_inf]
                y_crit_inf = t.pdf(x_crit_inf, graus_liberdade_teste)
                ax.fill_between(x_crit_inf, y_crit_inf, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                
                x_crit_sup = x[x >= t_critico_sup]
                y_crit_sup = t.pdf(x_crit_sup, graus_liberdade_teste)
                ax.fill_between(x_crit_sup, y_crit_sup, alpha=0.3, color='red', hatch='///')
                
                ax.axvline(t_critico_inf, color='red', linestyle='--', linewidth=2)
                ax.axvline(t_critico_sup, color='red', linestyle='--', linewidth=2)
                
            elif tipo_teste == "Unilateral √† direita":
                x_crit = x[x >= t_critico_sup]
                y_crit = t.pdf(x_crit, graus_liberdade_teste)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(t_critico_sup, color='red', linestyle='--', linewidth=2)
                
            else:  # Unilateral √† esquerda
                x_crit = x[x <= t_critico_inf]
                y_crit = t.pdf(x_crit, graus_liberdade_teste)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(t_critico_inf, color='red', linestyle='--', linewidth=2)
            
            # Estat√≠stica observada
            ax.axvline(estatistica_t, color='orange', linewidth=3, label=f't observado = {estatistica_t:.4f}')
            ax.annotate(f't = {estatistica_t:.4f}', xy=(estatistica_t, 0), xytext=(estatistica_t, 0.1),
                       arrowprops=dict(arrowstyle='->', color='orange'), ha='center')
            
            # √Årea do p-valor
            if tipo_teste == "Bilateral":
                if estatistica_t > 0:
                    x_p = x[x >= estatistica_t]
                    y_p = t.pdf(x_p, graus_liberdade_teste)
                    ax.fill_between(x_p, y_p, alpha=0.5, color='yellow', label=f'p-valor/2 = {p_valor/2:.6f}')
                    x_p2 = x[x <= -estatistica_t]
                    y_p2 = t.pdf(x_p2, graus_liberdade_teste)
                    ax.fill_between(x_p2, y_p2, alpha=0.5, color='yellow')
                else:
                    x_p = x[x <= estatistica_t]
                    y_p = t.pdf(x_p, graus_liberdade_teste)
                    ax.fill_between(x_p, y_p, alpha=0.5, color='yellow', label=f'p-valor/2 = {p_valor/2:.6f}')
                    x_p2 = x[x >= -estatistica_t]
                    y_p2 = t.pdf(x_p2, graus_liberdade_teste)
                    ax.fill_between(x_p2, y_p2, alpha=0.5, color='yellow')
            elif tipo_teste == "Unilateral √† direita":
                x_p = x[x >= estatistica_t]
                y_p = t.pdf(x_p, graus_liberdade_teste)
                ax.fill_between(x_p, y_p, alpha=0.5, color='yellow', label=f'p-valor = {p_valor:.6f}')
            else:
                x_p = x[x <= estatistica_t]
                y_p = t.pdf(x_p, graus_liberdade_teste)
                ax.fill_between(x_p, y_p, alpha=0.5, color='yellow', label=f'p-valor = {p_valor:.6f}')
            
            ax.set_xlabel('Valores de t')
            ax.set_ylabel('Densidade')
            ax.set_title(f'Teste de Hip√≥tese para a M√©dia ({tipo_teste})')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            st.success(f"**Estat√≠stica t observada:** {estatistica_t:.10f}")
            st.success(f"**p-valor:** {p_valor:.10f}")
            st.success(f"**Regi√£o de rejei√ß√£o:** {regiao_rejeicao}")
            
            if p_valor < alpha_teste:
                st.error(f"**Decis√£o:** {decisao} (p = {p_valor:.10f} < {alpha_teste})")
            else:
                st.info(f"**Decis√£o:** {decisao} (p = {p_valor:.10f} ‚â• {alpha_teste})")
    
    with aba_proporcao:
        st.subheader("Teste de Hip√≥tese para a Propor√ß√£o")
        
        # Exemplos
        with st.expander("üìù Exemplos Did√°ticos"):
            st.markdown("""
            **Farm√°cia:** Mais de 10% dos pacientes t√™m rea√ß√µes adversas?
            
            **Nutri√ß√£o:** Menos de 20% dos alunos comem vegetais diariamente?
            
            **Outro:** Propor√ß√£o de aprova√ß√£o no vestibular √© 50%?
            """)
        
        # Inputs
        col1, col2 = st.columns(2)
        
        with col1:
            sucessos_teste = st.number_input("N√∫mero de sucessos (x):", value=55, min_value=0, key="prop_sucessos")
            tamanho_amostra_prop_teste = st.number_input("Tamanho da amostra (n):", value=200, min_value=1, key="prop_n")
            
        with col2:
            p0_teste = st.number_input("Propor√ß√£o hipot√©tica (p‚ÇÄ):", value=0.25, min_value=0.01, max_value=0.99, step=0.01, key="prop_p0")
            alpha_prop_teste = st.selectbox("N√≠vel de signific√¢ncia (Œ±):", [0.01, 0.05, 0.10], key="prop_alpha")
            tipo_teste_prop = st.selectbox("Tipo de teste:", ["Bilateral", "Unilateral √† direita", "Unilateral √† esquerda"], key="prop_tipo")
        
        if st.button("Executar Teste para Propor√ß√£o"):
            # C√°lculos
            proporcao_amostral_teste = sucessos_teste / tamanho_amostra_prop_teste
            erro_padrao_prop_teste = np.sqrt(p0_teste * (1 - p0_teste) / tamanho_amostra_prop_teste)
            estatistica_z = (proporcao_amostral_teste - p0_teste) / erro_padrao_prop_teste
            
            # Valores cr√≠ticos e p-valor
            if tipo_teste_prop == "Bilateral":
                z_critico_inf = norm.ppf(alpha_prop_teste/2)
                z_critico_sup = norm.ppf(1 - alpha_prop_teste/2)
                p_valor_prop = 2 * (1 - norm.cdf(abs(estatistica_z)))
                regiao_rejeicao_prop = f"z < {z_critico_inf:.4f} ou z > {z_critico_sup:.4f}"
            elif tipo_teste_prop == "Unilateral √† direita":
                z_critico_sup = norm.ppf(1 - alpha_prop_teste)
                p_valor_prop = 1 - norm.cdf(estatistica_z)
                regiao_rejeicao_prop = f"z > {z_critico_sup:.4f}"
            else:  # Unilateral √† esquerda
                z_critico_inf = norm.ppf(alpha_prop_teste)
                p_valor_prop = norm.cdf(estatistica_z)
                regiao_rejeicao_prop = f"z < {z_critico_inf:.4f}"
            
            # Gr√°fico
            configurar_grafico()
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Curva normal padr√£o
            x = np.linspace(-4, 4, 1000)
            y = norm.pdf(x)
            ax.plot(x, y, 'b-', linewidth=2, label='Distribui√ß√£o Normal Padr√£o')
            
            # √Åreas cr√≠ticas
            if tipo_teste_prop == "Bilateral":
                x_crit_inf = x[x <= z_critico_inf]
                y_crit_inf = norm.pdf(x_crit_inf)
                ax.fill_between(x_crit_inf, y_crit_inf, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                
                x_crit_sup = x[x >= z_critico_sup]
                y_crit_sup = norm.pdf(x_crit_sup)
                ax.fill_between(x_crit_sup, y_crit_sup, alpha=0.3, color='red', hatch='///')
                
                ax.axvline(z_critico_inf, color='red', linestyle='--', linewidth=2)
                ax.axvline(z_critico_sup, color='red', linestyle='--', linewidth=2)
                
            elif tipo_teste_prop == "Unilateral √† direita":
                x_crit = x[x >= z_critico_sup]
                y_crit = norm.pdf(x_crit)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(z_critico_sup, color='red', linestyle='--', linewidth=2)
                
            else:  # Unilateral √† esquerda
                x_crit = x[x <= z_critico_inf]
                y_crit = norm.pdf(x_crit)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(z_critico_inf, color='red', linestyle='--', linewidth=2)
            
            # Estat√≠stica observada
            ax.axvline(estatistica_z, color='orange', linewidth=3, label=f'z observado = {estatistica_z:.4f}')
            ax.annotate(f'z = {estatistica_z:.4f}', xy=(estatistica_z, 0), xytext=(estatistica_z, 0.1),
                       arrowprops=dict(arrowstyle='->', color='orange'), ha='center')
            
            ax.set_xlabel('Valores de z')
            ax.set_ylabel('Densidade')
            ax.set_title(f'Teste de Hip√≥tese para a Propor√ß√£o ({tipo_teste_prop})')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            st.success(f"**Propor√ß√£o amostral:** {proporcao_amostral_teste:.10f}")
            st.success(f"**Estat√≠stica z observada:** {estatistica_z:.10f}")
            st.success(f"**p-valor:** {p_valor_prop:.10f}")
            st.success(f"**Regi√£o de rejei√ß√£o:** {regiao_rejeicao_prop}")
            
            if p_valor_prop < alpha_prop_teste:
                st.error(f"**Decis√£o:** Rejeitamos H‚ÇÄ (p = {p_valor_prop:.10f} < {alpha_prop_teste})")
            else:
                st.info(f"**Decis√£o:** N√£o rejeitamos H‚ÇÄ (p = {p_valor_prop:.10f} ‚â• {alpha_prop_teste})")
    
    with aba_diferenca:
        st.subheader("Teste para Diferen√ßa de M√©dias")
        
        # Exemplos
        with st.expander("üìù Exemplos Did√°ticos"):
            st.markdown("""
            **Farm√°cia:** Comparar a efic√°cia de dois medicamentos.
            
            **Nutri√ß√£o:** Comparar ingest√£o de s√≥dio entre dois grupos.
            
            **Outro:** Comparar rendimento escolar de dois m√©todos de ensino.
            """)
        
        # Inputs
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Grupo 1:**")
            media1 = st.number_input("M√©dia 1 (xÃÑ‚ÇÅ):", value=105.0, step=0.1, key="dif_media1")
            desvio1 = st.number_input("Desvio padr√£o 1 (s‚ÇÅ):", value=12.0, step=0.1, min_value=0.1, key="dif_desvio1")
            n1 = st.number_input("Tamanho da amostra 1 (n‚ÇÅ):", value=25, min_value=2, key="dif_n1")
            
        with col2:
            st.markdown("**Grupo 2:**")
            media2 = st.number_input("M√©dia 2 (xÃÑ‚ÇÇ):", value=98.0, step=0.1, key="dif_media2")
            desvio2 = st.number_input("Desvio padr√£o 2 (s‚ÇÇ):", value=15.0, step=0.1, min_value=0.1, key="dif_desvio2")
            n2 = st.number_input("Tamanho da amostra 2 (n‚ÇÇ):", value=30, min_value=2, key="dif_n2")
        
        tipo_variancia = st.selectbox("Tipo de vari√¢ncias:", ["Iguais", "Diferentes", "Pareado"], key="dif_variancia")
        alpha_dif = st.selectbox("N√≠vel de signific√¢ncia (Œ±):", [0.01, 0.05, 0.10], key="dif_alpha")
        tipo_teste_dif = st.selectbox("Tipo de teste:", ["Bilateral", "Unilateral √† direita", "Unilateral √† esquerda"], key="dif_tipo")
        
        if st.button("Executar Teste para Diferen√ßa"):
            # C√°lculos baseados no tipo de vari√¢ncia
            diferenca_medias = media1 - media2
            
            if tipo_variancia == "Iguais":
                # Vari√¢ncias iguais - pooled variance
                sp_squared = ((n1-1)*desvio1**2 + (n2-1)*desvio2**2) / (n1 + n2 - 2)
                erro_padrao_dif = np.sqrt(sp_squared * (1/n1 + 1/n2))
                graus_liberdade_dif = n1 + n2 - 2
                
            elif tipo_variancia == "Diferentes":
                # Vari√¢ncias diferentes - Welch's t-test
                erro_padrao_dif = np.sqrt(desvio1**2/n1 + desvio2**2/n2)
                # Graus de liberdade de Welch
                numerador = (desvio1**2/n1 + desvio2**2/n2)**2
                denominador = (desvio1**2/n1)**2/(n1-1) + (desvio2**2/n2)**2/(n2-1)
                graus_liberdade_dif = numerador / denominador
                
            else:  # Pareado
                # Para dados pareados, assumimos que temos as diferen√ßas
                # Aqui simplificamos usando a diferen√ßa das m√©dias
                erro_padrao_dif = np.sqrt(desvio1**2/n1)  # Simplifica√ß√£o
                graus_liberdade_dif = n1 - 1
            
            estatistica_t_dif = diferenca_medias / erro_padrao_dif
            
            # Valores cr√≠ticos e p-valor
            if tipo_teste_dif == "Bilateral":
                t_critico_inf_dif = t.ppf(alpha_dif/2, graus_liberdade_dif)
                t_critico_sup_dif = t.ppf(1 - alpha_dif/2, graus_liberdade_dif)
                p_valor_dif = 2 * (1 - t.cdf(abs(estatistica_t_dif), graus_liberdade_dif))
            elif tipo_teste_dif == "Unilateral √† direita":
                t_critico_sup_dif = t.ppf(1 - alpha_dif, graus_liberdade_dif)
                p_valor_dif = 1 - t.cdf(estatistica_t_dif, graus_liberdade_dif)
            else:  # Unilateral √† esquerda
                t_critico_inf_dif = t.ppf(alpha_dif, graus_liberdade_dif)
                p_valor_dif = t.cdf(estatistica_t_dif, graus_liberdade_dif)
            
            # Gr√°fico
            configurar_grafico()
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Curva t
            x = np.linspace(-4, 4, 1000)
            y = t.pdf(x, graus_liberdade_dif)
            ax.plot(x, y, 'b-', linewidth=2, label='Distribui√ß√£o t')
            
            # √Åreas cr√≠ticas
            if tipo_teste_dif == "Bilateral":
                x_crit_inf = x[x <= t_critico_inf_dif]
                y_crit_inf = t.pdf(x_crit_inf, graus_liberdade_dif)
                ax.fill_between(x_crit_inf, y_crit_inf, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                
                x_crit_sup = x[x >= t_critico_sup_dif]
                y_crit_sup = t.pdf(x_crit_sup, graus_liberdade_dif)
                ax.fill_between(x_crit_sup, y_crit_sup, alpha=0.3, color='red', hatch='///')
                
                ax.axvline(t_critico_inf_dif, color='red', linestyle='--', linewidth=2)
                ax.axvline(t_critico_sup_dif, color='red', linestyle='--', linewidth=2)
                
            elif tipo_teste_dif == "Unilateral √† direita":
                x_crit = x[x >= t_critico_sup_dif]
                y_crit = t.pdf(x_crit, graus_liberdade_dif)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(t_critico_sup_dif, color='red', linestyle='--', linewidth=2)
                
            else:  # Unilateral √† esquerda
                x_crit = x[x <= t_critico_inf_dif]
                y_crit = t.pdf(x_crit, graus_liberdade_dif)
                ax.fill_between(x_crit, y_crit, alpha=0.3, color='red', hatch='///', label='Regi√£o de Rejei√ß√£o')
                ax.axvline(t_critico_inf_dif, color='red', linestyle='--', linewidth=2)
            
            # Estat√≠stica observada
            ax.axvline(estatistica_t_dif, color='orange', linewidth=3, label=f't observado = {estatistica_t_dif:.4f}')
            ax.annotate(f't = {estatistica_t_dif:.4f}', xy=(estatistica_t_dif, 0), xytext=(estatistica_t_dif, 0.1),
                       arrowprops=dict(arrowstyle='->', color='orange'), ha='center')
            
            ax.set_xlabel('Valores de t')
            ax.set_ylabel('Densidade')
            ax.set_title(f'Teste para Diferen√ßa de M√©dias ({tipo_teste_dif}) - {tipo_variancia}')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultados
            st.success(f"**Diferen√ßa das m√©dias (xÃÑ‚ÇÅ - xÃÑ‚ÇÇ):** {diferenca_medias:.10f}")
            st.success(f"**Erro padr√£o da diferen√ßa:** {erro_padrao_dif:.10f}")
            st.success(f"**Graus de liberdade:** {graus_liberdade_dif:.2f}")
            st.success(f"**Estat√≠stica t observada:** {estatistica_t_dif:.10f}")
            st.success(f"**p-valor:** {p_valor_dif:.10f}")
            
            if p_valor_dif < alpha_dif:
                st.error(f"**Decis√£o:** Rejeitamos H‚ÇÄ (p = {p_valor_dif:.10f} < {alpha_dif})")
            else:
                st.info(f"**Decis√£o:** N√£o rejeitamos H‚ÇÄ (p = {p_valor_dif:.10f} ‚â• {alpha_dif})")

def pagina_referencias_nutricao():
    st.header("üìö Refer√™ncias em Nutri√ß√£o")
    
    st.markdown("""
    ### üìñ Artigos Cient√≠ficos Famosos e Relevantes na √Årea de Nutri√ß√£o
    
    Esta se√ß√£o apresenta uma sele√ß√£o de estudos seminais e influentes que moldaram nossa compreens√£o atual sobre nutri√ß√£o e sa√∫de.
    """)
    
    # Artigo 1
    st.markdown("---")
    st.subheader("1. ü•ó Alimentos Ultraprocessados e Ganho de Peso")
    
    with st.expander("üìÑ Detalhes do Estudo"):
        st.markdown("""
        **T√≠tulo:** Ultra-Processed Diets Cause Excess Calorie Intake and Weight Gain: An Inpatient Randomized Controlled Trial of Ad Libitum Food Intake
        
        **Autores:** Kevin D. Hall, Alexis Ayuketah, Robert Brychta, et al.
        
        **Revista:** Cell Metabolism, 2019
        
        **Resumo:** Este estudo controlado randomizado foi o primeiro a demonstrar causalmente que alimentos ultraprocessados levam ao aumento do consumo cal√≥rico e ganho de peso. Participantes consumiram 508 kcal/dia a mais quando expostos √† dieta ultraprocessada comparada √† dieta n√£o processada, resultando em ganho de 0,9 kg em duas semanas.
        
        **Import√¢ncia:** Forneceu evid√™ncia causal direta sobre os efeitos dos alimentos ultraprocessados na obesidade, influenciando pol√≠ticas p√∫blicas e diretrizes nutricionais globalmente.
        
        **DOI:** 10.1016/j.cmet.2019.05.008
        """)
    
    # Artigo 2
    st.markdown("---")
    st.subheader("2. üçÖ Padr√µes Alimentares Saud√°veis e Preven√ß√£o de Doen√ßas Cr√¥nicas")
    
    with st.expander("üìÑ Detalhes do Estudo"):
        st.markdown("""
        **T√≠tulo:** The importance of healthy dietary patterns in chronic disease prevention
        
        **Autor:** Marian L. Neuhouser
        
        **Revista:** Nutrition Research, 2019
        
        **Resumo:** Esta revis√£o abrangente examina como padr√µes alimentares saud√°veis - ricos em frutas, vegetais, gr√£os integrais e pobres em gorduras saturadas - reduzem significativamente o risco de diabetes, doen√ßas cardiovasculares e alguns tipos de c√¢ncer.
        
        **Import√¢ncia:** Consolidou d√©cadas de evid√™ncias sobre a import√¢ncia dos padr√µes alimentares globais versus nutrientes isolados, influenciando as Diretrizes Diet√©ticas Americanas de 2015-2020.
        
        **DOI:** 10.1016/j.nutres.2018.06.002
        """)
    
    # Artigo 3
    st.markdown("---")
    st.subheader("3. ü´í Dieta Mediterr√¢nea e Sa√∫de: Uma Vis√£o Abrangente")
    
    with st.expander("üìÑ Detalhes do Estudo"):
        st.markdown("""
        **T√≠tulo:** The Mediterranean diet and health: a comprehensive overview
        
        **Autores:** M. Guasch-Ferr√©, W. C. Willett
        
        **Revista:** Journal of Internal Medicine, 2021
        
        **Resumo:** Esta revis√£o narrativa fornece evid√™ncias robustas dos benef√≠cios da dieta mediterr√¢nea para sa√∫de cardiovascular, controle glic√™mico, longevidade e fun√ß√£o cognitiva. Tamb√©m aborda os impactos ambientais positivos deste padr√£o alimentar.
        
        **Import√¢ncia:** Consolidou evid√™ncias de m√∫ltiplos estudos observacionais e de interven√ß√£o, estabelecendo a dieta mediterr√¢nea como um dos padr√µes alimentares mais bem documentados cientificamente.
        
        **DOI:** 10.1111/joim.13333
        """)
    
    # Artigo 4
    st.markdown("---")
    st.subheader("4. ü¶† Influ√™ncia da Dieta no Microbioma Intestinal e Sa√∫de Humana")
    
    with st.expander("üìÑ Detalhes do Estudo"):
        st.markdown("""
        **T√≠tulo:** Influence of diet on the gut microbiome and implications for human health
        
        **Autores:** Rasnik K Singh, Hsin-Wen Chang, Di Yan, et al.
        
        **Revista:** Journal of Translational Medicine, 2017
        
        **Resumo:** Esta revis√£o sistem√°tica examina como diferentes componentes diet√©ticos modulam a composi√ß√£o do microbioma intestinal e suas implica√ß√µes para doen√ßas inflamat√≥rias, obesidade, diabetes tipo 2 e doen√ßas cardiovasculares.
        
        **Import√¢ncia:** Estabeleceu as bases cient√≠ficas para compreender a rela√ß√£o dieta-microbioma-sa√∫de, abrindo novos caminhos para interven√ß√µes nutricionais personalizadas.
        
        **DOI:** 10.1186/s12967-017-1175-y
        """)
    
    # Artigo 5
    st.markdown("---")
    st.subheader("5. üåç Estimativa Global de Inadequa√ß√µes de Micronutrientes")
    
    with st.expander("üìÑ Detalhes do Estudo"):
        st.markdown("""
        **T√≠tulo:** Global estimation of dietary micronutrient inadequacies: a modelling analysis
        
        **Autores:** Ty Beal, Christopher D. Gardner, Mario Herrero, et al.
        
        **Revista:** The Lancet Global Health, 2024
        
        **Resumo:** Este estudo de modelagem global revelou que mais de 5 bilh√µes de pessoas t√™m ingest√£o inadequada de iodo, vitamina E e c√°lcio, enquanto mais de 4 bilh√µes t√™m defici√™ncias de ferro, riboflavina, folato e vitamina C.
        
        **Import√¢ncia:** Forneceu a primeira estimativa global abrangente de inadequa√ß√µes de micronutrientes, informando pol√≠ticas de sa√∫de p√∫blica e programas de fortifica√ß√£o alimentar mundialmente.
        
        **DOI:** 10.1016/S2214-109X(24)00276-6
        """)
    
    # Se√ß√£o adicional
    st.markdown("---")
    st.subheader("üî¨ Por que estes estudos s√£o importantes?")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Impacto Cient√≠fico:**
        - Estudos altamente citados (>100 cita√ß√µes cada)
        - Publicados em revistas de alto impacto
        - Metodologias rigorosas e inovadoras
        - Evid√™ncias causais ou correlacionais robustas
        """)
    
    with col2:
        st.markdown("""
        **Relev√¢ncia Pr√°tica:**
        - Influenciam pol√≠ticas p√∫blicas de sa√∫de
        - Orientam diretrizes nutricionais globais
        - Fundamentam pr√°ticas cl√≠nicas
        - Direcionam pesquisas futuras
        """)
    
    st.markdown("---")
    st.info("""
    üí° **Nota:** Estes artigos representam marcos na ci√™ncia da nutri√ß√£o e continuam influenciando pesquisas, 
    pol√≠ticas e pr√°ticas nutricionais ao redor do mundo. Para aplica√ß√µes pr√°ticas em infer√™ncia estat√≠stica, 
    muitos destes estudos utilizaram os m√©todos apresentados nas outras se√ß√µes deste aplicativo.
    """)

if __name__ == "__main__":
    main()

